// Test all binary operations on 4D and 5D tensors
// Operations: +, -, *, /

// Test 4D: Addition
fn test_4d_add() -> f32 {
    f32<2,2,2,2> a = {
        1.0, 2.0,  3.0, 4.0,
        5.0, 6.0,  7.0, 8.0,
        9.0, 10.0, 11.0, 12.0,
        13.0, 14.0, 15.0, 16.0
    };

    f32<2,2,2,2> b = {
        10.0, 10.0, 10.0, 10.0,
        10.0, 10.0, 10.0, 10.0,
        10.0, 10.0, 10.0, 10.0,
        10.0, 10.0, 10.0, 10.0
    };

    f32<2,2,2,2> result = a + b;
    return result[0i,0i,0i,0i] + result[1i,1i,1i,1i];  // 11 + 26 = 37
}

// Test 4D: Subtraction
fn test_4d_sub() -> f32 {
    f32<2,2,2,2> a = {
        100.0, 90.0, 80.0, 70.0,
        60.0, 50.0, 40.0, 30.0,
        20.0, 10.0, 5.0, 15.0,
        25.0, 35.0, 45.0, 55.0
    };

    f32<2,2,2,2> b = {
        10.0, 20.0, 30.0, 40.0,
        50.0, 40.0, 30.0, 20.0,
        10.0, 5.0, 2.5, 7.5,
        12.5, 17.5, 22.5, 27.5
    };

    f32<2,2,2,2> result = a - b;
    return result[0i,0i,0i,0i] + result[1i,1i,1i,1i];  // 90 + 27.5 = 117.5
}

// Test 4D: Multiplication
fn test_4d_mul() -> f32 {
    f32<2,2,2,2> a = {
        2.0, 3.0, 4.0, 5.0,
        6.0, 7.0, 8.0, 9.0,
        1.0, 2.0, 3.0, 4.0,
        5.0, 6.0, 7.0, 8.0
    };

    f32<2,2,2,2> b = {
        10.0, 10.0, 10.0, 10.0,
        10.0, 10.0, 10.0, 10.0,
        5.0, 5.0, 5.0, 5.0,
        5.0, 5.0, 5.0, 5.0
    };

    f32<2,2,2,2> result = a * b;
    return result[0i,0i,0i,0i] + result[1i,0i,0i,0i];  // 20 + 5 = 25
}

// Test 4D: Division
fn test_4d_div() -> f32 {
    f32<2,2,2,2> a = {
        100.0, 80.0, 60.0, 40.0,
        200.0, 150.0, 100.0, 50.0,
        90.0, 60.0, 30.0, 15.0,
        180.0, 120.0, 60.0, 30.0
    };

    f32<2,2,2,2> b = {
        10.0, 10.0, 10.0, 10.0,
        10.0, 10.0, 10.0, 10.0,
        10.0, 10.0, 10.0, 5.0,
        10.0, 10.0, 10.0, 5.0
    };

    f32<2,2,2,2> result = a / b;
    return result[0i,0i,0i,0i] + result[1i,0i,1i,1i];  // 10 + 3 = 13
}

// Test 4D: Complex expression
fn test_4d_complex() -> f32 {
    f32<2,2,2,2> a = {
        1.0, 2.0, 3.0, 4.0,
        5.0, 6.0, 7.0, 8.0,
        9.0, 10.0, 11.0, 12.0,
        13.0, 14.0, 15.0, 16.0
    };

    f32<2,2,2,2> b = {
        2.0, 2.0, 2.0, 2.0,
        2.0, 2.0, 2.0, 2.0,
        2.0, 2.0, 2.0, 2.0,
        2.0, 2.0, 2.0, 2.0
    };

    f32<2,2,2,2> c = {
        3.0, 3.0, 3.0, 3.0,
        3.0, 3.0, 3.0, 3.0,
        3.0, 3.0, 3.0, 3.0,
        3.0, 3.0, 3.0, 3.0
    };

    // (a + b) * c
    f32<2,2,2,2> sum = a + b;
    f32<2,2,2,2> result = sum * c;

    return result[0i,0i,0i,0i];  // (1+2)*3 = 9
}

// Test 5D: Addition
fn test_5d_add() -> f32 {
    f32<2,2,2,2,2> a = {
        1.0, 2.0,  3.0, 4.0,
        5.0, 6.0,  7.0, 8.0,
        9.0, 10.0, 11.0, 12.0,
        13.0, 14.0, 15.0, 16.0,
        17.0, 18.0, 19.0, 20.0,
        21.0, 22.0, 23.0, 24.0,
        25.0, 26.0, 27.0, 28.0,
        29.0, 30.0, 31.0, 32.0
    };

    f32<2,2,2,2,2> b = {
        100.0, 100.0, 100.0, 100.0,
        100.0, 100.0, 100.0, 100.0,
        100.0, 100.0, 100.0, 100.0,
        100.0, 100.0, 100.0, 100.0,
        100.0, 100.0, 100.0, 100.0,
        100.0, 100.0, 100.0, 100.0,
        100.0, 100.0, 100.0, 100.0,
        100.0, 100.0, 100.0, 100.0
    };

    f32<2,2,2,2,2> result = a + b;
    return result[0i,0i,0i,0i,0i] + result[1i,1i,1i,1i,1i];  // 101 + 132 = 233
}

// Test 5D: Multiplication
fn test_5d_mul() -> f32 {
    f32<2,2,2,2,2> a = {
        2.0, 3.0, 4.0, 5.0,
        6.0, 7.0, 8.0, 9.0,
        1.0, 2.0, 3.0, 4.0,
        5.0, 6.0, 7.0, 8.0,
        2.0, 3.0, 4.0, 5.0,
        6.0, 7.0, 8.0, 9.0,
        1.0, 2.0, 3.0, 4.0,
        5.0, 6.0, 7.0, 8.0
    };

    f32<2,2,2,2,2> b = {
        10.0, 10.0, 10.0, 10.0,
        10.0, 10.0, 10.0, 10.0,
        10.0, 10.0, 10.0, 10.0,
        10.0, 10.0, 10.0, 10.0,
        5.0, 5.0, 5.0, 5.0,
        5.0, 5.0, 5.0, 5.0,
        5.0, 5.0, 5.0, 5.0,
        5.0, 5.0, 5.0, 5.0
    };

    f32<2,2,2,2,2> result = a * b;
    return result[0i,0i,0i,0i,0i] + result[1i,0i,0i,0i,0i];  // 20 + 10 = 30
}

// Test 5D: Division
fn test_5d_div() -> f32 {
    f32<2,2,2,2,2> a = {
        100.0, 50.0, 25.0, 200.0,
        80.0, 40.0, 120.0, 60.0,
        150.0, 75.0, 90.0, 45.0,
        180.0, 90.0, 110.0, 55.0,
        100.0, 50.0, 25.0, 200.0,
        80.0, 40.0, 120.0, 60.0,
        150.0, 75.0, 90.0, 45.0,
        180.0, 90.0, 110.0, 55.0
    };

    f32<2,2,2,2,2> b = {
        10.0, 5.0, 5.0, 10.0,
        8.0, 4.0, 10.0, 6.0,
        10.0, 5.0, 9.0, 5.0,
        10.0, 5.0, 11.0, 5.0,
        10.0, 5.0, 5.0, 10.0,
        8.0, 4.0, 10.0, 6.0,
        10.0, 5.0, 9.0, 5.0,
        10.0, 5.0, 11.0, 5.0
    };

    f32<2,2,2,2,2> result = a / b;
    return result[0i,0i,0i,0i,0i] + result[1i,1i,1i,1i,1i];  // 10 + 11 = 21
}

// Main aggregator
fn test_highd_binary_main() -> f32 {
    var r1 = test_4d_add();       // 37
    var r2 = test_4d_sub();       // 117.5
    var r3 = test_4d_mul();       // 25
    var r4 = test_4d_div();       // 13
    var r5 = test_4d_complex();   // 9
    var r6 = test_5d_add();       // 233
    var r7 = test_5d_mul();       // 30
    var r8 = test_5d_div();       // 21

    return r1 + r2 + r3 + r4 + r5 + r6 + r7 + r8;
    // Expected: 37 + 117.5 + 25 + 13 + 9 + 233 + 30 + 21 = 485.5
}
