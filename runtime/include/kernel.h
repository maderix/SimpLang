#ifndef KERNEL_H
#define KERNEL_H

#include <immintrin.h>
#include <cstddef>
#include <cstdint>
#include <cstdio>   // Added for printf
#include <cstdlib>  // Added for size_t on some platforms

// Debug macros
#ifndef SIMD_DEBUG
#define SIMD_DEBUG 0
#endif

#if SIMD_DEBUG
#define DEBUG_PRINT(x) printf("%s", (x))
#else
#define DEBUG_PRINT(x)
#endif

#ifdef __cplusplus
extern "C" {
#endif

// Forward declarations for slice types
struct sse_slice_t;
struct avx_slice_t;

// SSE slice type (4-wide vectors)
typedef struct sse_slice_t {
    __m256d* data;  // Pointer to array of 4-wide vectors
    size_t len;     // Current length
    size_t cap;     // Capacity
} sse_slice_t;

// AVX slice type (8-wide vectors)
typedef struct avx_slice_t {
    __m512d* data;  // Pointer to array of 8-wide vectors
    size_t len;     // Current length
    size_t cap;     // Capacity
} avx_slice_t;

// Vector creation functions
__m256d sse(double a, double b, double c, double d);
__m512d avx(double a, double b, double c, double d,
            double e, double f, double g, double h);

// SIMD arithmetic operations
__m256d simd_add(__m256d a, __m256d b);
__m512d simd_add_avx(__m512d a, __m512d b);
__m256d simd_mul(__m256d a, __m256d b);
__m512d simd_mul_avx(__m512d a, __m512d b);

// Memory management
__m256d* allocate_sse_vectors(size_t count);
__m512d* allocate_avx_vectors(size_t count);
void free_vectors(void* ptr);

// Slice management
sse_slice_t* make_sse_slice(size_t len);
avx_slice_t* make_avx_slice(size_t len);
void free_slice(void* slice);

// Slice operations
void slice_set_sse(sse_slice_t* slice, size_t idx, __m256d value);
__m256d slice_get_sse(sse_slice_t* slice, size_t idx);
void slice_set_avx(avx_slice_t* slice, size_t idx, __m512d value);
__m512d slice_get_avx(avx_slice_t* slice, size_t idx);

// Vector printing functions
void print_sse_vector(__m256d vec);
void print_avx_vector(__m512d vec);
void print_sse_slice(sse_slice_t* slice);
void print_avx_slice(avx_slice_t* slice);

// Debug vector printing functions
static inline void print_debug_vector_sse(const char* msg, __m256d vec) {
    DEBUG_PRINT(msg);
    DEBUG_PRINT(": ");
    #if SIMD_DEBUG
    print_sse_vector(vec);
    #endif
}

static inline void print_debug_vector_avx(const char* msg, __m512d vec) {
    DEBUG_PRINT(msg);
    DEBUG_PRINT(": ");
    #if SIMD_DEBUG
    print_avx_vector(vec);
    #endif
}

// Host runtime entry point
double host_main(void);

// Main kernel functions generated by SimpleLang compiler
#ifdef TEST_SIMD
void kernel_main(sse_slice_t* sse_slice, avx_slice_t* avx_slice);
#else
double kernel_main(void);
#endif

#ifdef __cplusplus
}
#endif

#endif // KERNEL_H