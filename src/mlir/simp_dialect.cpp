//===- simp_dialect.cpp - Simp dialect implementation ---------------------===//
//
// Part of the SimpLang Project
//
// This file implements the Simp dialect class.
//
//===----------------------------------------------------------------------===//

#include "mlir/simp_dialect.hpp"
#include "mlir/simp_ops.hpp"
#include "mlir/simp_types.hpp"
#include "mlir/IR/Builders.h"
#include "mlir/IR/BuiltinTypes.h"
#include "mlir/IR/DialectImplementation.h"
#include "mlir/IR/OpImplementation.h"
#include "llvm/ADT/TypeSwitch.h"

using namespace mlir;
using namespace mlir::simp;

//===----------------------------------------------------------------------===//
// Simp Dialect
//===----------------------------------------------------------------------===//

// Include generated dialect definitions
#include "SimpDialect.cpp.inc"

// The constructor is generated by TableGen, we just implement initialize()
void SimpDialect::initialize() {
  // Register types
  addTypes<ArrayType, SimpTensorType>();

  // Register operations
  addOperations<
#define GET_OP_LIST
#include "SimpOps.cpp.inc"
  >();
}

//===----------------------------------------------------------------------===//
// Constant Materialization
//===----------------------------------------------------------------------===//

mlir::Operation *SimpDialect::materializeConstant(mlir::OpBuilder &builder,
                                                   mlir::Attribute value,
                                                   mlir::Type type,
                                                   mlir::Location loc) {
  // Create a simp.constant operation for the given value and type
  return builder.create<simp::ConstantOp>(loc, type, value);
}

//===----------------------------------------------------------------------===//
// Operation Definitions
//===----------------------------------------------------------------------===//

// Include generated operation definitions
#define GET_OP_CLASSES
#include "SimpOps.cpp.inc"
