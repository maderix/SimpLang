#include <iostream>
#include <fstream>
#include <string>
#include "codegen.hpp"
#include "ast.hpp"
#include <llvm/Support/TargetSelect.h>
#include <llvm/Support/raw_ostream.h>
#include <sys/stat.h>
#include <unistd.h>

extern int yyparse();
extern int yydebug;
extern BlockAST* programBlock;
extern FILE* yyin;

// Function to read and display file content
void displayFileContent(const char* filename) {
    std::ifstream file(filename);
    std::string line;
    int lineNum = 1;
    std::cout << "\nSource file content:\n";
    std::cout << "--------------------\n";
    while (std::getline(file, line)) {
        std::cout << lineNum << "| " << line << std::endl;
        lineNum++;
    }
    std::cout << "--------------------\n\n";
    file.close();
}

// Function to check if file exists and is readable
bool isFileAccessible(const char* filename) {
    struct stat buffer;
    return (stat(filename, &buffer) == 0 && access(filename, R_OK) == 0);
}

int main(int argc, char **argv) {
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " source.sl" << std::endl;
        return 1;
    }

    std::cout << "Debug: Starting compiler...\n";

    // Check file accessibility
    if (!isFileAccessible(argv[1])) {
        std::cerr << "Error: Cannot access file '" << argv[1] << "'" << std::endl;
        return 1;
    }

    // Display file content
    displayFileContent(argv[1]);

    // Initialize LLVM
    std::cout << "Debug: Initializing LLVM...\n";
    llvm::InitializeNativeTarget();
    llvm::InitializeNativeTargetAsmParser();
    llvm::InitializeNativeTargetAsmPrinter();

    // Set input file
    std::cout << "Debug: Opening source file...\n";
    yyin = fopen(argv[1], "r");
    if (!yyin) {
        std::cerr << "Error: Failed to open " << argv[1] << std::endl;
        return 1;
    }

    // Enable parser debugging
    yydebug = 1;

    // Parse the input
    std::cout << "Debug: Starting parsing phase...\n";
    if (yyparse()) {
        std::cerr << "Error: Failed to parse " << argv[1] << std::endl;
        return 1;
    }

    if (!programBlock) {
        std::cerr << "Error: No program block generated\n";
        return 1;
    }

    // Generate code
    std::cout << "\nDebug: Starting code generation phase...\n";
    CodeGenContext context;
    context.generateCode(*programBlock);

    std::cout << "\nDebug: Generated LLVM IR:\n";
    std::cout << "--------------------\n";
    context.getModule()->print(llvm::outs(), nullptr);
    std::cout << "--------------------\n";

    std::cout << "Debug: Compilation completed successfully\n";
    return 0;
}
