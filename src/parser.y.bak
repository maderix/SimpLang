%{
    #include <string>
    #include <vector>
    #include <iostream>
    #include <cstdlib>
    #include <memory>
    #include "ast.hpp"
    
    BlockAST *programBlock;

    extern int yylex();
    extern int yylineno;
    extern char* yytext;
    extern FILE* yyin;
    void yyerror(const char *s) { 
        std::cerr << "Parser error on line " << yylineno << ": " << s << std::endl;
        std::cerr << "Near token: " << yytext << std::endl;
    }

    #define YYERROR_VERBOSE 1
    #define YYDEBUG 1
%}

%error-verbose

%union {
    BlockAST *block;
    ExprAST *expr;
    StmtAST *stmt;
    VariableDeclarationAST *var_decl;
    std::vector<ExprAST*> *exprvec;
    std::vector<VariableDeclarationAST*> *varvec;
    std::string *string;
    int token;
}

%token <string> TIDENTIFIER TINTEGER TFLOAT
%token <token> TCEQ TCNE TCLT TCLE TCGT TCGE
%token <token> TPLUS TMINUS TMUL TDIV
%token <token> TVAR TFUNC TIF TELSE TWHILE TRETURN
%token <token> TLPAREN TRPAREN TLBRACE TRBRACE
%token <token> TEQUAL TCOMMA TSEMICOLON

%type <block> program stmts block
%type <stmt> stmt func_decl if_stmt while_stmt return_stmt
%type <expr> expr numeric ident call_expr
%type <exprvec> call_args
%type <varvec> func_decl_args
%type <var_decl> var_decl

%left TPLUS TMINUS
%left TMUL TDIV

%start program

%%

program : stmts { 
    std::cout << "PARSE: Completed parsing program" << std::endl;
    programBlock = $1; 
}
        ;

stmts : stmt { 
    std::cout << "PARSE: Creating new block with statement" << std::endl;
    $$ = new BlockAST(); 
    $$->statements.push_back($1); 
}
      | stmts stmt { 
    std::cout << "PARSE: Adding statement to block" << std::endl;
    $1->statements.push_back($2); 
}
      ;

stmt : var_decl TSEMICOLON { 
    std::cout << "PARSE: Variable declaration" << std::endl;
    $$ = $1; 
}
     | func_decl {
    std::cout << "PARSE: Function declaration" << std::endl;
}
     | expr TSEMICOLON { 
    std::cout << "PARSE: Expression statement" << std::endl;
    $$ = new ExpressionStmtAST($1); 
}
     | return_stmt {
    std::cout << "PARSE: Return statement" << std::endl;
}
     | if_stmt {
    std::cout << "PARSE: If statement" << std::endl;
}
     | while_stmt {
    std::cout << "PARSE: While statement" << std::endl;
}
     ;

block : TLBRACE stmts TRBRACE { 
    std::cout << "PARSE: Block with statements" << std::endl;
    $$ = $2; 
}
      | TLBRACE TRBRACE { 
    std::cout << "PARSE: Empty block" << std::endl;
    $$ = new BlockAST(); 
}
      ;

var_decl : TVAR TIDENTIFIER TEQUAL expr { 
    std::cout << "PARSE: Variable declaration with initialization" << std::endl;
    $$ = new VariableDeclarationAST(*$2, $4); 
}
         ;

func_decl : TFUNC TIDENTIFIER TLPAREN func_decl_args TRPAREN block { 
    std::cout << "PARSE: Function declaration: " << *$2 << std::endl;
    $$ = new FunctionAST(*$2, $4, $6); 
}
          ;

func_decl_args : /* empty */ { 
    std::cout << "PARSE: Empty function arguments" << std::endl;
    $$ = new std::vector<VariableDeclarationAST*>(); 
}
               | var_decl { 
    std::cout << "PARSE: Single function argument" << std::endl;
    $$ = new std::vector<VariableDeclarationAST*>(); 
    $$->push_back($1); 
}
               | func_decl_args TCOMMA var_decl { 
    std::cout << "PARSE: Additional function argument" << std::endl;
    $1->push_back($3); 
}
               ;

if_stmt : TIF TLPAREN expr TRPAREN block { 
    std::cout << "PARSE: If statement without else" << std::endl;
    $$ = new IfAST($3, $5, nullptr); 
}
        | TIF TLPAREN expr TRPAREN block TELSE block { 
    std::cout << "PARSE: If statement with else" << std::endl;
    $$ = new IfAST($3, $5, $7); 
}
        ;

while_stmt : TWHILE TLPAREN expr TRPAREN block { 
    std::cout << "PARSE: While statement" << std::endl;
    $$ = new WhileAST($3, $5); 
}
           ;

return_stmt : TRETURN expr TSEMICOLON { 
    std::cout << "PARSE: Return statement" << std::endl;
    $$ = new ReturnAST($2); 
}
            ;

expr : ident {
    std::cout << "PARSE: Identifier expression" << std::endl;
}
     | numeric {
    std::cout << "PARSE: Numeric expression" << std::endl;
}
     | expr TMUL expr { 
    std::cout << "PARSE: Multiplication expression" << std::endl;
    $$ = new BinaryExprAST('*', $1, $3); 
}
     | expr TDIV expr { 
    std::cout << "PARSE: Division expression" << std::endl;
    $$ = new BinaryExprAST('/', $1, $3); 
}
     | expr TPLUS expr { 
    std::cout << "PARSE: Addition expression" << std::endl;
    $$ = new BinaryExprAST('+', $1, $3); 
}
     | expr TMINUS expr { 
    std::cout << "PARSE: Subtraction expression" << std::endl;
    $$ = new BinaryExprAST('-', $1, $3); 
}
     | expr TCEQ expr { 
    std::cout << "PARSE: Equality comparison" << std::endl;
    $$ = new BinaryExprAST(TCEQ, $1, $3); 
}
     | expr TCNE expr { 
    std::cout << "PARSE: Not-equal comparison" << std::endl;
    $$ = new BinaryExprAST(TCNE, $1, $3); 
}
     | expr TCLT expr { 
    std::cout << "PARSE: Less-than comparison" << std::endl;
    $$ = new BinaryExprAST(TCLT, $1, $3); 
}
     | expr TCLE expr { 
    std::cout << "PARSE: Less-than-equal comparison" << std::endl;
    $$ = new BinaryExprAST(TCLE, $1, $3); 
}
     | expr TCGT expr { 
    std::cout << "PARSE: Greater-than comparison" << std::endl;
    $$ = new BinaryExprAST(TCGT, $1, $3); 
}
     | expr TCGE expr { 
    std::cout << "PARSE: Greater-than-equal comparison" << std::endl;
    $$ = new BinaryExprAST(TCGE, $1, $3); 
}
     | TLPAREN expr TRPAREN { 
    std::cout << "PARSE: Parenthesized expression" << std::endl;
    $$ = $2; 
}
     | ident TEQUAL expr { 
    std::cout << "PARSE: Assignment expression" << std::endl;
    $$ = new AssignmentExprAST($1, $3); 
}
     | call_expr {
    std::cout << "PARSE: Function call" << std::endl;
}
     ;

call_expr : ident TLPAREN call_args TRPAREN { 
    std::cout << "PARSE: Function call to: " << ((VariableExprAST*)$1)->getName() << std::endl;
    $$ = new CallExprAST(((VariableExprAST*)$1)->getName(), *$3); 
}
          ;

call_args : /* empty */ { 
    std::cout << "PARSE: Empty call arguments" << std::endl;
    $$ = new std::vector<ExprAST*>(); 
}
          | expr { 
    std::cout << "PARSE: First call argument" << std::endl;
    $$ = new std::vector<ExprAST*>(); 
    $$->push_back($1); 
}
          | call_args TCOMMA expr { 
    std::cout << "PARSE: Additional call argument" << std::endl;
    $1->push_back($3); 
}
          ;

ident : TIDENTIFIER { 
    std::cout << "PARSE: Identifier: " << *$1 << std::endl;
    $$ = new VariableExprAST(*$1); 
}
      ;

numeric : TINTEGER { 
    std::cout << "PARSE: Integer: " << *$1 << std::endl;
    $$ = new NumberExprAST(atof($1->c_str())); 
}
        | TFLOAT { 
    std::cout << "PARSE: Float: " << *$1 << std::endl;
    $$ = new NumberExprAST(atof($1->c_str())); 
}
        ;

%%
